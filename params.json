{"name":"SEEP - Stateful Real-Time Big Data Analytics","tagline":"","body":"## Overview\r\n\r\nSEEP is an experimental parallel data processing system that is being developed\r\nby the Large-Scale Distributed Systems (LSDS) research group\r\n(http://lsds.doc.ic.ac.uk) at Imperial College London. It is licensed under\r\nEPL (Eclipse Public License).\r\n\r\nThe SEEP system is under heavy development and should be considered an alpha\r\nrelease. This is not considered a \"stable\" branch.\r\n\r\nFurther details on SEEP, including papers that explain the underlying model \r\ncan be found at the project website:\r\nhttp://lsds.doc.ic.ac.uk/projects/SEEP\r\n\r\nThe SEEP system consists of two modules, the runtime system (seep-system) and a\r\ncompiler (java2sdg). Below is some information regarding how to build the\r\nsystem and modules.\r\n\r\n## Building it\r\n\r\nThe project follows the standard Maven directory structure, with two\r\ndifferentiated modules, seep-system and seep-java2sdg.\r\n\r\nThere are two options to build the SEEP system:\r\n\r\nOption 1, single jar (recommended) -- run:\r\n```Shell\r\nmvn clean compile assembly:single\r\n```\r\nThis produces one jar with all dependencies included.\r\n\r\nOption 2, without dependencies -- to compile it:\r\n\r\n```Shell\r\nmvn -DskipTests package\r\n```\r\nIn this case, ensure that the classpath includes the dependencies.\r\n\r\nYou can alternatively build only individual modules, by running the same\r\noptions above inside seep-system or seep-java2sdg, respectively.\r\n\r\n## Running it\r\n\r\n### Seep System\r\n\r\nThe system requires one master node and N worker nodes (one worker node per\r\nOperator).\r\n\r\nFirst set the IP address of the master node in \"mainAddr\" inside\r\nconfig.properties and build the SEEP system.\r\n\r\nNext run the master in the designated node:\r\n\r\n```Shell\r\njava -jar <system.jar> Master <query.jar> <Base-class>\r\n```\r\nwhere query.jar is the compiled query and the last parameter is the name of \r\nthe base class, not a path.\r\n\r\nFinally run as many worker nodes as your query requires:\r\n\r\n```Shell\r\njava -jar <system.jar> Worker\r\n```\r\n\r\nLocal mode:\r\n\r\nTo run the SEEP system in a single local machine, append a different port to\r\neach Worker node:\r\n\r\n```Shell\r\njava -jar <system.jar> Worker <port>\r\n```\r\n### Seep Java2sdg\r\n\r\nIt is mandatory to indicate an input program, an output file name and a target\r\n(dot/seepjar) and the classpath to the driver program and its dependencies.\r\nExamples: \r\n\r\n```Shell\r\njava -jar <java2sdg.jar> -i Driver -t dot -o myOutput -cp examples/\r\n```\r\nThe above code will process input program \"Driver\" using the dependencies in\r\n\"examples/\" to generate an output file \"myOutput.dot\".\r\n\r\n## Mini Tutorial\r\n\r\nThis tutorial outlines how to run a simple example application in SEEP locally on a single machine, starting from a fresh clone of the source code. Below, we assume that <SEEP Dir> refers to the name of the directory to which the SEEP code has been cloned and <Path to SEEP Dir> is the full absolute path to this directory.\r\n\r\n1) We inspect the application and configure the system. \r\n\r\nTo get an overview of the example application, open <SEEP Dir>/seep-system/examples/stateless-simple-query/src/Base.java in your favorite editor and observe the following:\r\n* the method _compose_ defines the application and returns a _QueryPlan_\r\n* the application contains three operators, each is a _Connectable_ that is instantiated with a different functionality, which is given as a class in the constructor of _Connectable_\r\n* for each _Connectable_, the input schema has to be provided as a list of String attributes\r\n* the created _Connectable_ objects are then connected to build the actual data flow graph, which, in this example, is a sequence _Source_ -> _Processor_ -> _Sink_\r\n* the actual operator implementations can be found in the classes _Source_, _Processor_, _Sink_ in package _operators_\r\n\r\nFor the configuration, use your favorite editor and open <SEEP Dir>/seep-system/src/main/resources/config.properties . Assuming that the system should run locally make sure that the file states:\r\n```Shell\r\nmainAddr = 127.0.0.1\r\nmainPort = 3500\r\n```\r\n\r\n2) We build the system, copy the snapshot of the system to the example application, and build the example application:\r\n```Shell\r\ncd <Path to SEEP Dir>/<SEEP Dir>\r\n./build.sh\r\nmkdir seep-system/examples/stateless-simple-query/lib\r\ncp seep-system/target/seep-0.0.1-SNAPSHOT.jar seep-system/examples/stateless-simple-query/lib/\r\ncd seep-system/examples/stateless-simple-query\r\nant\r\n```\r\n3) We start the system locally. Open four terminals to start one Master node and three Worker nodes. \r\n\r\nThe following snippet should start the master node and bring up a terminal menu:\r\n\r\n```Shell\r\ncd <Path to SEEP Dir>/<SEEP Dir>\r\njava -jar seep-system/target/seepystem-0.0.1-SNAPSHOT.jar Master <Path to SEEP Dir>/<SEEP Dir>/seep-system/examples/stateless-simple-query/dist/stateless-simple-query.jar Base\r\n```\r\n\r\nNow, we start the three workers (note that each is assigned a different port, given as the last parameter):\r\n\r\n```Shell\r\ncd <Path to SEEP Dir>/<SEEP Dir>\r\njava -jar seep-system/target/seepystem-0.0.1-SNAPSHOT.jar Worker 3501\r\n```\r\n```Shell\r\ncd <Path to SEEP Dir>/<SEEP Dir>\r\njava -jar seep-system/target/seepystem-0.0.1-SNAPSHOT.jar Worker 3502\r\n```\r\n```Shell\r\ncd <Path to SEEP Dir>/<SEEP Dir>\r\njava -jar seep-system/target/seepystem-0.0.1-SNAPSHOT.jar Worker 3503\r\n```\r\nAfter that the terminal running the Master node should show messages that indicate that the workers connected to the master.\r\n\r\nIn the terminal for the master, insert the following (1 deploys the code to the workers, 2 starts execution, after an additional enter, the actual data is streamed):\r\n\r\n```Shell\r\n1\r\n2\r\n<Enter>\r\n```\r\nNow, one of the terminals running a worker node should print out a statement starting with \"SNK\" roughly every second. This worker runs the _Sink_ operator and the output indicates the time elapsed (first number, in seconds) and the number of tuples received (second number).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}